input {
    beats {
        port => 5044
    }
}
filter {
    grok {
        match   => [ "message", "%{SYSLOGBASE} %{GREEDYDATA:message}" ]
        overwrite => [ "message", "timestamp" ]
    }
    if "_grokparsefailure" in [tags] {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
#            match   => [ "message", "%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:log_level}\s\s?%{GREEDYDATA:message}" ]
            match   => [ "message", "%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:log_level}\s\s?\[%{DATA:component}\] \[%{DATA:account_info}\] %{GREEDYDATA:message}" ]
            overwrite => [ "message", "timestamp" ]
            remove_tag => [ "_grokparsefailure" ]
            add_tag => ["_grok_mailboxd_success"]
        }
    }
    date {
        match => [ "timestamp", "MMM dd HH:mm:ss",
                              "MMM  d HH:mm:ss", "ISO8601" ]
        timezone => "America/Sao_Paulo"
    }
    if "multiline" not in [log][flags] {
        if "_grok_mailboxd_success" in [tags] {
            kv {
                allow_duplicate_values => false
                field_split => ";?"
                source => "account_info"
                prefix => "zimbra_account_"
                add_tag => ["_zimbra_account_kv_success"]
            }
            grok {
                patterns_dir   => "/usr/share/logstash/config/patterns"
                match   => [ "message", "%{DATA:zimbra_module} - %{GREEDYDATA:message}" ]
                overwrite => [ "message" ]
                add_tag => ["_module_success"]
            }
            grok {
                patterns_dir   => "/usr/share/logstash/config/patterns"
                match   => [ "message", "%{WORD:zimbra_capability} elapsed=%{NUMBER:elapsed}" ]
                add_tag => ["_elapsed_success"]
            }
        }
        if "_elapsed_success" not in [tags] {
            mutate {
                remove_tag => ["_grokparsefailure"]
            }
            if "zimbra default auth mechanism" not in [message] {
                grok {
                    patterns_dir   => "/usr/share/logstash/config/patterns"
                    match   => [ "message", "%{DATA:zimbra_action}: %{GREEDYDATA:message}" ]
                    overwrite => [ "message" ]
                    add_tag => ["_action_success"]
                }
            }
            if "_grokparsefailure" in [tags] {
                mutate {
                    remove_tag => ["_grokparsefailure"]
                }
                grok {
                    patterns_dir   => "/usr/share/logstash/config/patterns"
                    match   => [ "message", "%{DATA:zimbra_action}(\{)%{GREEDYDATA:message}" ]
                    overwrite => [ "message" ]
                    add_tag => ["_action_success"]
                }
            }
            if "moving Message" in [message] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "%{DATA:zimbra_user_action} \(id=%{NUMBER:zimbra_user_action_src_folder_id}\) to Folder %{DATA:zimbra_user_action_dst_folder} \(id=%{NUMBER:zimbra_user_action_dst_folder_id}\)" ]
                    overwrite       => [ "message" ]
                    add_tag         => ["_moving_message_success"]
                    remove_tag      => ["_grokparsefailure"]
                }
            }
            else if "Discarding message" in [message] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "%{DATA:zimbra_action_status} with Message-ID <%{DATA:zimbra_action_msgid}> from \"%{DATA:zimbra_action_coding}\" %{GREEDYDATA:zimbra_action_sender_username}" ]
                    overwrite       => [ "message" ]
                    add_tag         => ["_discarding_message_success"]
                    remove_tag      => ["_grokparsefailure"]
                }
            }
            else if "Deleting" in [message] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "%{DATA:zimbra_user_action} \(id=%{NUMBER:zimbra_user_action_src_folder_id}\)." ]
                    overwrite       => [ "message" ]
                    add_tag         => ["_deleting_message_success"]
                    remove_tag      => ["_grokparsefailure"]
                }
            }
            else if "Copying Message" in [message] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "%{DATA:zimbra_action_user} \(id=%{NUMBER:zimbra_action_user_src_folder_id}\): copyId=%{NUMBER:zimbra_action_user_copyId}, folderId=%{NUMBER:zimbra_action_user_folderId}, folderName=%{DATA:zimbra_action_user_folderName}, parentId=%{NUMBER:zimbra_action_user_parentId}." ]
                    overwrite       => [ "message" ]
                    add_tag         => ["_copying_message_success"]
                    remove_tag      => ["_grokparsefailure"]
                }
            }
            else if "sqltrace" in [zimbra_module] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "%{DATA:zimbra_action_sql} \(%{NUMBER:zimbra_action_sql_time_ms}ms\): %{GREEDYDATA:zimbra_action_sql_query}" ]
                    overwrite       => [ "message" ]
                    add_tag         => ["_sql_message_success"]
                    remove_tag      => ["_grokparsefailure"]
                }
            }
            else {
                kv {
                    allow_duplicate_values => false
                    source => "message"
                    field_split => ", "
                    prefix => "zimbra_action_"
                    add_tag => ["_zimbra_action_kv_success"]
                }
            }
        }
        if "_elapsed_success" not in [tags] or "_action_success" not in [tags] {
            mutate {
                remove_tag => ["_grokparsefailure"]
            }
            if "repeated failed login" in [message] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "Access from IP %{IP:zimbra_account_src_ip} %{WORD:zimbra_account_status}, for %{DATA:zimbra_cause}\." ]
                    overwrite       => [ "message" ]
                    add_tag         => ["_rep_failed_message_success"]
                    remove_tag      => ["_grokparsefailure"]
                }
            }
            else if "Authentication failed -" in [message] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "%{DATA:zimbra_status} - %{WORD:zimbra_feature} %{DATA:zimbra_cause} for %{GREEDYDATA:zimbra_account}" ]
                    overwrite       => [ "message" ]
                    add_tag         => ["_feature_failed_message_success"]
                    remove_tag      => ["_grokparsefailure"]
                }
            }
            else if [message] == "BatchRequest" or [message] == "connected" or [message] == "quit from client" {
                mutate {
                    rename      => ["message","zimbra_status"]
                    add_tag     => "_status_success"
                    remove_tag  => ["_grokparsefailure"]
                }
            }
        }
        if "_action_success" in [tags] {
            if "feature not enabled" in [message] {
                grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "message" , "%{DATA:zimbra_feature} feature not enabled on account %{NOTSPACE:zimbra_account}" ]
                    add_tag         => "_feature_message_success"
                    add_field       => [ "zimbra_status", "feature not enabled" ]
                }
            }
        }
        if [zimbra_action_sender] {
            grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "zimbra_action_sender" , "%{DATA:zimbra_action_sender_username}@%{GREEDYDATA:zimbra_action_sender_domain}" ]
                    add_tag         => "_action_sender_success"
            }
        }
        if [zimbra_account_name] {
            grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "zimbra_account_name" , "%{DATA:zimbra_account_username}@%{GREEDYDATA:zimbra_account_domain}" ]
                    add_tag         => "_account_user_success"
            }
        }
        if [component] {
            grok {
                    patterns_dir    => "/usr/share/logstash/config/patterns"
                    match           => [ "component" , "%{DATA:zimbra_component}-%{INT:zimbra_component_thread_id}(:%{GREEDYDATA:zimbra_component_url})?" ]
                    add_tag         => "_component_success"
            }
        }
    }
    # grok log lines by program name (listed alpabetically)
    if [program] =~ /^postfix.*\/anvil$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_ANVIL}$" ]
            tag_on_failure => [ "_grok_postfix_anvil_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/bounce$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_BOUNCE}$" ]
            tag_on_failure => [ "_grok_postfix_bounce_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/cleanup$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_CLEANUP}$" ]
            tag_on_failure => [ "_grok_postfix_cleanup_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/dnsblog$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_DNSBLOG}$" ]
            tag_on_failure => [ "_grok_postfix_dnsblog_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/error$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_ERROR}$" ]
            tag_on_failure => [ "_grok_postfix_error_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/local$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_LOCAL}$" ]
            tag_on_failure => [ "_grok_postfix_local_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/master$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_MASTER}$" ]
            tag_on_failure => [ "_grok_postfix_master_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/pickup$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_PICKUP}$" ]
            tag_on_failure => [ "_grok_postfix_pickup_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/pipe$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_PIPE}$" ]
            tag_on_failure => [ "_grok_postfix_pipe_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postdrop$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_POSTDROP}$" ]
            tag_on_failure => [ "_grok_postfix_postdrop_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postscreen$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_POSTSCREEN}$" ]
            tag_on_failure => [ "_grok_postfix_postscreen_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/qmgr$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_QMGR}$" ]
            tag_on_failure => [ "_grok_postfix_qmgr_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/scache$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_SCACHE}$" ]
            tag_on_failure => [ "_grok_postfix_scache_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/sendmail$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_SENDMAIL}$" ]
            tag_on_failure => [ "_grok_postfix_sendmail_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/smtp$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_SMTP}$" ]
            tag_on_failure => [ "_grok_postfix_smtp_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/lmtp$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_LMTP}$" ]
            tag_on_failure => [ "_grok_postfix_lmtp_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/smtpd$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_SMTPD}$" ]
            tag_on_failure => [ "_grok_postfix_smtpd_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postsuper$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_POSTSUPER}$" ]
            tag_on_failure => [ "_grok_postfix_postsuper_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/tlsmgr$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_TLSMGR}$" ]
            tag_on_failure => [ "_grok_postfix_tlsmgr_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/tlsproxy$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_TLSPROXY}$" ]
            tag_on_failure => [ "_grok_postfix_tlsproxy_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/trivial-rewrite$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_TRIVIAL_REWRITE}$" ]
            tag_on_failure => [ "_grok_postfix_trivial_rewrite_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/discard$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_DISCARD}$" ]
            tag_on_failure => [ "_grok_postfix_discard_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/virtual$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => [ "message", "^%{POSTFIX_VIRTUAL}$" ]
            tag_on_failure => [ "_grok_postfix_virtual_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*/ {
        mutate {
            add_tag => [ "_grok_postfix_program_nomatch" ]
        }
    }

    # process key-value data if it exists
    if [postfix_keyvalue_data] {
        kv {
            source       => "postfix_keyvalue_data"
            trim_value   => "<>,"
            prefix       => "postfix_"
            remove_field => [ "postfix_keyvalue_data" ]
        }

        # some post processing of key-value data
        if [postfix_client] {
            grok {
                patterns_dir   => "/usr/share/logstash/config/patterns"
                match          => ["postfix_client", "^%{POSTFIX_CLIENT_INFO}$"]
                tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
                remove_field   => [ "postfix_client" ]
            }
        }
        if [postfix_relay] {
            grok {
                patterns_dir   => "/usr/share/logstash/config/patterns"
                match          => ["postfix_relay", "^%{POSTFIX_RELAY_INFO}$"]
                tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
                remove_field   => [ "postfix_relay" ]
            }
        }
        if [postfix_delays] {
            grok {
                patterns_dir   => "/usr/share/logstash/config/patterns"
                match          => ["postfix_delays", "^%{POSTFIX_DELAYS}$"]
                tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
                remove_field   => [ "postfix_delays" ]
            }
        }
    }

    # process command counter data if it exists
    if [postfix_command_counter_data] {
        grok {
            patterns_dir   => "/usr/share/logstash/config/patterns"
            match          => ["postfix_command_counter_data", "^%{POSTFIX_COMMAND_COUNTER_DATA}$"]
            tag_on_failure => ["_grok_postfix_command_counter_data_nomatch"]
            remove_field   => ["postfix_command_counter_data"]
        }
    }

    # Do some data type conversions
    mutate {
        convert => [
            # list of integer fields
            "postfix_anvil_cache_size", "integer",
            "postfix_anvil_conn_count", "integer",
            "postfix_anvil_conn_rate", "integer",
            "postfix_client_port", "integer",
            "postfix_cmd_auth", "integer",
            "postfix_cmd_auth_accepted", "integer",
            "postfix_cmd_count", "integer",
            "postfix_cmd_count_accepted", "integer",
            "postfix_cmd_data", "integer",
            "postfix_cmd_data_accepted", "integer",
            "postfix_cmd_ehlo", "integer",
            "postfix_cmd_ehlo_accepted", "integer",
            "postfix_cmd_helo", "integer",
            "postfix_cmd_helo_accepted", "integer",
            "postfix_cmd_mail", "integer",
            "postfix_cmd_mail_accepted", "integer",
            "postfix_cmd_quit", "integer",
            "postfix_cmd_quit_accepted", "integer",
            "postfix_cmd_rcpt", "integer",
            "postfix_cmd_rcpt_accepted", "integer",
            "postfix_cmd_rset", "integer",
            "postfix_cmd_rset_accepted", "integer",
            "postfix_cmd_starttls", "integer",
            "postfix_cmd_starttls_accepted", "integer",
            "postfix_cmd_unknown", "integer",
            "postfix_cmd_unknown_accepted", "integer",
            "postfix_nrcpt", "integer",
            "postfix_postscreen_cache_dropped", "integer",
            "postfix_postscreen_cache_retained", "integer",
            "postfix_postscreen_dnsbl_rank", "integer",
            "postfix_relay_port", "integer",
            "postfix_server_port", "integer",
            "postfix_size", "integer",
            "postfix_status_code", "integer",
            "postfix_termination_signal", "integer",

            # list of float fields
            "postfix_delay", "float",
            "postfix_delay_before_qmgr", "float",
            "postfix_delay_conn_setup", "float",
            "postfix_delay_in_qmgr", "float",
            "postfix_delay_transmission", "float",
            "postfix_postscreen_violation_time", "float"
        ]
    }
}

output {
    elasticsearch {
        hosts => [ "http://172.17.0.1:9202" ]
        index => "logstash-logs-%{+YYYY}"
        user => "elastic"
        password => "Bk@tech"
    }
}
